package cn.edu.nwpu.utils;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.panel.CrosshairOverlay;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;

/**
 * @ClassName ReducingValve
 * @Author: ch update wkx
 * @Date: 2019/6/28 15:19
 * @Version: v1.1
 * @Description: 绘制结果曲线，增加根据map画图
 */
public class BalsDisplayPanel extends javax.swing.JPanel {

    private String filePath;
    private static ChartPanel chartPanel;
    private static Crosshair xCrosshair;
    private static Crosshair yCrosshair;
    TableModel tableModel;
    private Map<String, List<Double>> resultMap;

    /**
     * Creates new form DataDisplayPanel
     */
    public BalsDisplayPanel(String filePath) {
        this.filePath = filePath;
        readData();
        initComponents();
        setTableAction();
        jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }

    /**
     * 构造函数重载，读入结果map
     * @param resultMap
     */
    public BalsDisplayPanel(Map<String, List<Double>> resultMap) {
        this.resultMap = resultMap;
        readData(resultMap);
        initComponents();
        setTableAction();
        jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }

    private boolean setTableAction() {
        this.jTable.setModel(tableModel);
        final JTableHeader jTableHeader = jTable.getTableHeader();
        jTableHeader.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                int click = jTableHeader.columnAtPoint(e.getPoint());
                TableModel tblModel = jTable.getModel();
                int length = tblModel.getRowCount();
                String columnName
                        = jTableHeader.getColumnModel().getColumn(click).getHeaderValue().toString();
                if (click != 0 && click != 1) {
                    XYSeries xyseries = new XYSeries("时间-" + columnName);
                    for (int i = 0; i < length; i++) {
                        double time = Double.parseDouble(tblModel.getValueAt(i, 1).toString());
                        double value = Double.parseDouble(tblModel.getValueAt(i, click).toString());
                        xyseries.add(time, value);
                    }

                    JFreeChart newChart = createChart("时间-" + columnName, "时间(S)", columnName, xyseries);
                    chartPanel.setChart(newChart);
                }

                System.out.println(click);
            }
        });
        return true;
    }

    public boolean setBalsData(String filename) {
        this.filePath = filename;
        if(this.readData()==false) return false;
        this.chartOutPanel = this.chartPanel;
        this.jSplitPane1.setLeftComponent(chartOutPanel);
        this.validate();
        this.setTableAction();
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        chartOutPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(1000, 650));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setDividerSize(10);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setViewportView(jTable);

        jSplitPane1.setRightComponent(jScrollPane1);

        chartOutPanel = chartPanel;

        javax.swing.GroupLayout chartOutPanelLayout = new javax.swing.GroupLayout(chartOutPanel);
        chartOutPanel.setLayout(chartOutPanelLayout);
        chartOutPanelLayout.setHorizontalGroup(
                chartOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 998, Short.MAX_VALUE)
        );
        chartOutPanelLayout.setVerticalGroup(
                chartOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 149, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(chartOutPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>

    /**
     * @Title: createChartPanel
     * @Description: 初始化chartPanel
     * @param initJfreechart 初始化chartPanel需要的图表
     */
    private void createChartPanel(JFreeChart initJfreechart) {

        chartPanel = new ChartPanel(initJfreechart, true, true, true, true, true);
        chartPanel.addChartMouseListener(new ChartMouseListener() {
            @Override
            public void chartMouseClicked(ChartMouseEvent event) {
                // ignore
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent event) {
                Rectangle2D dataArea = chartPanel.getScreenDataArea();
                JFreeChart chart = event.getChart();
                XYPlot plot = (XYPlot) chart.getPlot();
                ValueAxis xAxis = plot.getDomainAxis();
                double x = xAxis.java2DToValue(event.getTrigger().getX(), dataArea, RectangleEdge.BOTTOM);
                double y = DatasetUtilities.findYValue(plot.getDataset(), 0, x);
                xCrosshair.setValue(x);
                yCrosshair.setValue(y);
            }
        });

        xCrosshair = new Crosshair(Double.NaN, Color.BLACK, new BasicStroke(0f));
        xCrosshair.setLabelVisible(true);
        yCrosshair = new Crosshair(Double.NaN, Color.BLACK, new BasicStroke(0f));
        yCrosshair.setLabelVisible(true);
        CrosshairOverlay crosshairOverlay = new CrosshairOverlay();
        crosshairOverlay.addDomainCrosshair(xCrosshair);
        crosshairOverlay.addRangeCrosshair(yCrosshair);
        chartPanel.addOverlay(crosshairOverlay);

    }

    /**
     * 读数据重载,map中必须包括key为t的list
     * @param resultMap
     * @return
     */
    public boolean readData(Map<String, List<Double>> resultMap){
        List<String> titleList = new ArrayList<>();
        titleList.add("index");
        titleList.add("t");
        for (String s : resultMap.keySet()) {
            if (!s.equals("t")){
                titleList.add(s);
            }
        }
        final String[] columnNames = titleList.toArray(new String[titleList.size()]);


        final Double[][] dataTable = new Double[resultMap.get("t").size()][titleList.size()+1];

        for (int i = 0; i < resultMap.get("t").size(); i++) {
            dataTable[i][0] = Double.valueOf(i);
            dataTable[i][1] = resultMap.get("t").get(i);
        }
        int count = 2;
        for (String s : resultMap.keySet()) {
            if (!s.equals("t")){
                for (int i = 0; i < resultMap.get("t").size(); i++) {
                    dataTable[i][count] = resultMap.get(s).get(i);
                }
                count++;
            }
        }

        setTableModel(dataTable, columnNames);
        XYSeries initXYSeries = new XYSeries("时间-" + columnNames[2]);
        for (int i = 0; i < resultMap.get("t").size(); i++) {
            initXYSeries.add(dataTable[i][1], dataTable[i][2]);
        }
        createChartPanel(createChart("时间-" + columnNames[2], "时间(S)", columnNames[2], initXYSeries));

        return true;
    }

    private void setTableModel(Double[][] dataTable, String[] columnNames) {
        tableModel = new DefaultTableModel(dataTable, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        if (this.jTable != null) {
            this.jTable.setModel(tableModel);
        }

    }

    public boolean readData(){
        BufferedReader bufferedReader = null;
        try {
            bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath),"gbk"));
        } catch (Exception e1) {
            e1.printStackTrace();
            return false;
        }

        String title = null;
        try {
            title = bufferedReader.readLine().trim();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        final String[] columnNames = title.split("\\s+");
        final List<Double[]> input = new ArrayList<>();
        String line;
        try {
            while ((line = bufferedReader.readLine()) != null && line.length() > 0) {
                Double[] numbers = new Double[columnNames.length];
                String[] numStrs = line.split("\\s+");
                for (int i = 0; i < numbers.length; i++) {
                    try {
                        numbers[i] = new Double(numStrs[i]);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                input.add(numbers);
            }
        } catch (NumberFormatException e1) {
            e1.printStackTrace();
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        try {
            bufferedReader.close();
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        final Double[][] dataTable = new Double[input.size()][];
        for (int i = 0; i < input.size(); i++) {
            dataTable[i] = input.get(i);
        }

        setTableModel(dataTable, columnNames);

        XYSeries initXYSeries = new XYSeries("时间-" + columnNames[2]);
        for (int i = 0; i < input.size(); i++) {
            initXYSeries.add(dataTable[i][1], dataTable[i][2]);
        }
        createChartPanel(createChart("时间-" + columnNames[2], "时间(S)", columnNames[2], initXYSeries));
        return true;
    }

    /**
     * @Title: createChart
     * @Description: 绘制图表
     * @param title 图表的标题
     * @param xAxisLabel 图表的横坐标标识
     * @param yAxisLabel 图表的纵坐标标识
     * @param xySeries 图表要显示的数据
     * @return
     */
    private JFreeChart createChart(String title, String xAxisLabel, String yAxisLabel, XYSeries xySeries) {

        XYSeriesCollection xyseriescollection = new XYSeriesCollection();
        xyseriescollection.addSeries(xySeries);

        JFreeChart jfreechart = ChartFactory.createXYLineChart(title, xAxisLabel, yAxisLabel, xyseriescollection,
                PlotOrientation.VERTICAL, true, true, false);
        XYPlot xyplot = jfreechart.getXYPlot();
        xyplot.setBackgroundPaint(Color.white);
        xyplot.setAxisOffset(new RectangleInsets(0D, 0D, 0D, 0D));
        xyplot.setDomainGridlinePaint(Color.black);
        xyplot.setRangeGridlinePaint(Color.black);
        xyplot.setDomainCrosshairVisible(true);
        xyplot.setRangeCrosshairVisible(true);
        //XYLineAndShapeRenderer xylineandshaperenderer = (XYLineAndShapeRenderer) xyplot.getRenderer();
        // xylineandshaperenderer.setShapesVisible(true);
        // xylineandshaperenderer.setShapesFilled(true);
        NumberAxis numberaxis = (NumberAxis) xyplot.getRangeAxis();
        numberaxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // 为标题设置上字体
        Font titleFont = new Font("微软雅黑", Font.PLAIN, 15);
        TextTitle textTitle = jfreechart.getTitle();
        textTitle.setFont(titleFont);

        // 为图例说明设置字体
        Font LegendFont = new Font("微软雅黑", Font.PLAIN, 15);
        LegendTitle legend = jfreechart.getLegend(0);
        legend.setItemFont(LegendFont);

        // 横坐标设置字体
        Font xLabelFont = new Font("微软雅黑", Font.PLAIN, 15);
        ValueAxis xAxis = jfreechart.getXYPlot().getDomainAxis();
        xAxis.setLabelFont(xLabelFont);

        // 纵坐标设置字体
        Font yLabelFont = new Font("微软雅黑", Font.PLAIN, 15);
        ValueAxis yAxis = jfreechart.getXYPlot().getRangeAxis();
        yAxis.setLabelFont(yLabelFont);

        return jfreechart;
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel chartOutPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration
}
